# generated by datamodel-codegen:
#   filename:  https://json-schema.org/draft/2020-12/schema
#   timestamp: 2025-02-06T02:57:05+00:00

from __future__ import annotations

from collections.abc import Mapping, Sequence, Set
from enum import Enum
from typing import Annotated, Any, FrozenSet, Optional, Union

from pydantic import AnyUrl, BaseModel, Field, RootModel


class AnchorString(RootModel[str]):
    root: Annotated[str, Field(pattern="^[A-Za-z_][-A-Za-z0-9._]*$")]


class UriString(RootModel[AnyUrl]):
    root: AnyUrl


class UriReferenceString(RootModel[str]):
    root: str


class SchemaArray(RootModel[Sequence[Any]]):
    root: Annotated[Sequence[Any], Field(min_length=1)]


class Unevaluated(BaseModel):
    unevaluatedItems: Optional[Any] = None
    unevaluatedProperties: Optional[Any] = None


class NonNegativeInteger(RootModel[int]):
    root: Annotated[int, Field(ge=0)]


class NonNegativeIntegerDefault0(RootModel[NonNegativeInteger]):
    root: NonNegativeInteger


class SimpleTypes(Enum):
    ARRAY = "array"
    BOOLEAN = "boolean"
    INTEGER = "integer"
    NULL = "null"
    NUMBER = "number"
    OBJECT = "object"
    STRING = "string"


class StringArray(RootModel[FrozenSet[str]]):
    root: FrozenSet[str]


class MetaData(BaseModel):
    title: Optional[str] = None
    description: Optional[str] = None
    default: Optional[Any] = None
    deprecated: Optional[bool] = False
    readOnly: Optional[bool] = False
    writeOnly: Optional[bool] = False
    examples: Optional[Sequence] = None


class FormatAnnotation(BaseModel):
    format: Optional[str] = None


class Content(BaseModel):
    contentEncoding: Optional[str] = None
    contentMediaType: Optional[str] = None
    contentSchema: Optional[Any] = None


class Core(BaseModel):
    field_id: Annotated[Optional[UriReferenceString], Field(alias="$id")] = None
    field_schema: Annotated[Optional[UriString], Field(alias="$schema")] = None
    field_ref: Annotated[Optional[UriReferenceString], Field(alias="$ref")] = None
    field_anchor: Annotated[Optional[AnchorString], Field(alias="$anchor")] = None
    field_dynamicRef: Annotated[
        Optional[UriReferenceString], Field(alias="$dynamicRef")
    ] = None
    field_dynamicAnchor: Annotated[
        Optional[AnchorString], Field(alias="$dynamicAnchor")
    ] = None
    field_vocabulary: Annotated[
        Optional[Mapping[str, bool]], Field(alias="$vocabulary")
    ] = None
    field_comment: Annotated[Optional[str], Field(alias="$comment")] = None
    field_defs: Annotated[Optional[Mapping[str, Any]], Field(alias="$defs")] = None


class Applicator(BaseModel):
    prefixItems: Optional[SchemaArray] = None
    items: Optional[Any] = None
    contains: Optional[Any] = None
    additionalProperties: Optional[Any] = None
    properties: Optional[Mapping[str, Any]] = {}
    patternProperties: Optional[Mapping[str, Any]] = {}
    dependentSchemas: Optional[Mapping[str, Any]] = {}
    propertyNames: Optional[Any] = None
    if_: Annotated[Optional[Any], Field(alias="if")] = None
    then: Optional[Any] = None
    else_: Annotated[Optional[Any], Field(alias="else")] = None
    allOf: Optional[SchemaArray] = None
    anyOf: Optional[SchemaArray] = None
    oneOf: Optional[SchemaArray] = None
    not_: Annotated[Optional[Any], Field(alias="not")] = None


class Type(RootModel[FrozenSet[SimpleTypes]]):
    root: Annotated[FrozenSet[SimpleTypes], Field(min_length=1)]


class Validation(BaseModel):
    type: Optional[Union[SimpleTypes, Type]] = None
    const: Optional[Any] = None
    enum: Optional[Sequence] = None
    multipleOf: Annotated[Optional[float], Field(gt=0.0)] = None
    maximum: Optional[float] = None
    exclusiveMaximum: Optional[float] = None
    minimum: Optional[float] = None
    exclusiveMinimum: Optional[float] = None
    maxLength: Optional[NonNegativeInteger] = None
    minLength: Optional[NonNegativeIntegerDefault0] = None
    pattern: Optional[str] = None
    maxItems: Optional[NonNegativeInteger] = None
    minItems: Optional[NonNegativeIntegerDefault0] = None
    uniqueItems: Optional[bool] = False
    maxContains: Optional[NonNegativeInteger] = None
    minContains: Annotated[Optional[NonNegativeInteger], Field()] = 1
    maxProperties: Optional[NonNegativeInteger] = None
    minProperties: Optional[NonNegativeIntegerDefault0] = None
    required: Optional[StringArray] = None
    dependentRequired: Optional[Mapping[str, StringArray]] = None


class CoreAndValidationSpecificationsMetaSchema(
    Core, Applicator, Unevaluated, Validation, MetaData, FormatAnnotation, Content
):
    definitions: Optional[Mapping[str, Any]] = {}
    dependencies: Optional[Mapping[str, Union[Any, StringArray]]] = {}
    field_recursiveAnchor: Annotated[
        Optional[AnchorString], Field(alias="$recursiveAnchor")
    ] = None
    field_recursiveRef: Annotated[
        Optional[UriReferenceString], Field(alias="$recursiveRef")
    ] = None
